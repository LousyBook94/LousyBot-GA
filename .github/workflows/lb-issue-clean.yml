name: Issue Cleaner

on:
  issue_comment:
    types: [created]

jobs:
  clean-comments:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read

    steps:
    - name: Generate GitHub App Token
      id: generate_token
      if: vars.APP_ID
      uses: actions/create-github-app-token@v2
      with:
        app-id: ${{ vars.APP_ID }}
        private-key: ${{ secrets.LB_PRIVATE_KEY }}

    - name: Clean Comments
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |
        echo "üßπ Cleaning up bot comments..."
        
        # Get the comment data
        COMMENT_BODY="${{ github.event.comment.body }}"
        ISSUE_NUMBER="${{ github.event.comment.issue.number }}"
        
        if [ -z "$ISSUE_NUMBER" ]; then
          echo "‚ö†Ô∏è No issue number found, skipping cleanup"
          exit 0
        fi
        
        echo "üßπ Processing comment on issue #$ISSUE_NUMBER"
        
        # Configuration
        CLEANUP_COMMANDS=(
          "@lousybot /clear"
          "@lousybot clear" 
          "@lousybot /clean"
          "@lousybot clean"
        )
        
        # Check if comment contains any cleanup command
        IS_CLEANUP_REQUEST=false
        for cmd in "${CLEANUP_COMMANDS[@]}"; do
          if echo "$COMMENT_BODY" | grep -qi "$cmd"; then
            IS_CLEANUP_REQUEST=true
            break
          fi
        done
        
        if [ "$IS_CLEANUP_REQUEST" = false ]; then
          echo "No cleanup command found in comment"
          exit 0
        fi
        
        echo "üéØ Cleanup command detected, processing..."
        
        # Get all comments on the issue
        COMMENTS_RESPONSE=$(curl -s -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" \
          "${{ github.api_url }}/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments")
        
        TOTAL_COMMENTS=$(echo "$COMMENTS_RESPONSE" | jq '. | length')
        echo "üìù Found $TOTAL_COMMENTS total comments"
        
        # Define which comments to delete
        COMMENTS_TO_DELETE=()
        
        # Extract comments that should be deleted
        while IFS= read -r comment; do
          if [ -n "$comment" ]; then
            USER_LOGIN=$(echo "$comment" | jq -r '.user.login' | tr '[:upper:]' '[:lower:]')
            COMMENT_BODY=$(echo "$comment" | jq -r '.body' | tr '[:upper:]' '[:lower:]')
            
            # Delete comments from known bot accounts
            for bot in "github-actions[bot]" "lousybot" "lousybot[bot]"; do
              if [ "$USER_LOGIN" = "$bot" ]; then
                COMMENTS_TO_DELETE+=("$(echo "$comment" | jq -r '.id')")
                break
              fi
            done
            
            # Delete comments mentioning the bot
            for mention in "@lousybot" "lousybot" "generated by lousybot-ga"; do
              if echo "$COMMENT_BODY" | grep -q "$mention"; then
                COMMENTS_TO_DELETE+=("$(echo "$comment" | jq -r '.id')")
                break
              fi
            done
            
            # Delete badge comments specifically
            if echo "$COMMENT_BODY" | grep -q "üè∑Ô∏è issue badges\|generated by lousybot-ga"; then
              COMMENTS_TO_DELETE+=("$(echo "$comment" | jq -r '.id')")
            fi
          fi
        done <<< "$(echo "$COMMENTS_RESPONSE" | jq -c '.[]' 2>/dev/null)"
        
        # Remove duplicates
        COMMENTS_TO_DELETE_UNIQUE=($(printf "%s\n" "${COMMENTS_TO_DELETE[@]}" | sort -u))
        
        echo "üóëÔ∏è Found ${#COMMENTS_TO_DELETE_UNIQUE[@]} comments to delete"
        
        if [ ${#COMMENTS_TO_DELETE_UNIQUE[@]} -eq 0 ]; then
          # Create no-comments message
          NO_COMMENTS_CONTENT='üßπ **Cleanup Complete** - No bot comments found to delete.\n\n*This message will self-delete in 60 seconds.*'
          NO_COMMENTS_RESPONSE=$(curl -s -X POST -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -d "{\"body\":\"$NO_COMMENTS_CONTENT\"}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments")
          
          NO_COMMENTS_ID=$(echo "$NO_COMMENTS_RESPONSE" | jq -r '.id')
          
          # Self-delete this message too
          echo "‚è≥ Waiting 60 seconds before self-deleting no-comments message..."
          sleep 60
          
          curl -s -X DELETE -H "Authorization: Bearer $GH_TOKEN" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/comments/$NO_COMMENTS_ID"
          echo "üóëÔ∏è Self-deleted no-comments message"
          exit 0
        fi
        
        # Delete the comments
        DELETED_COUNT=0
        FAILED_COUNT=0
        
        for comment_id in "${COMMENTS_TO_DELETE_UNIQUE[@]}"; do
          if [ -n "$comment_id" ]; then
            RESPONSE=$(curl -s -X DELETE -H "Authorization: Bearer $GH_TOKEN" \
              "${{ github.api_url }}/repos/${{ github.repository }}/issues/comments/$comment_id" -w "%{http_code}")
            
            if [ "$RESPONSE" = "204" ] || [ "$RESPONSE" = "200" ]; then
              DELETED_COUNT=$((DELETED_COUNT + 1))
              echo "‚úÖ Deleted comment $comment_id"
            else
              FAILED_COUNT=$((FAILED_COUNT + 1))
              echo "‚ùå Failed to delete comment $comment_id (HTTP $RESPONSE)"
            fi
          fi
        done
        
        # Create summary comment
        SUMMARY_CONTENT="üßπ **Cleanup Complete**\n\n"
        SUMMARY_CONTENT+="- ‚úÖ Deleted: $DELETED_COUNT comments\n"
        if [ $FAILED_COUNT -gt 0 ]; then
          SUMMARY_CONTENT+="- ‚ùå Failed: $FAILED_COUNT comments\n"
        fi
        SUMMARY_CONTENT+="\n*This comment will self-delete in 60 seconds to keep the issue clean.*"
        
        SUMMARY_RESPONSE=$(curl -s -X POST -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          -d "{\"body\":\"$SUMMARY_CONTENT\"}" \
          "${{ github.api_url }}/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments")
        
        SUMMARY_ID=$(echo "$SUMMARY_RESPONSE" | jq -r '.id')
        
        echo "üéâ Cleanup completed: $DELETED_COUNT deleted, $FAILED_COUNT failed"
        
        # Self-delete the summary comment after a delay
        echo "‚è≥ Waiting 60 seconds before self-deleting summary comment..."
        sleep 60
        
        curl -s -X DELETE -H "Authorization: Bearer $GH_TOKEN" \
          "${{ github.api_url }}/repos/${{ github.repository }}/issues/comments/$SUMMARY_ID"
        echo "üóëÔ∏è Self-deleted summary comment"
        
        # Error handling
        catch() {
          echo "‚ùå Error in comment cleanup: $1"
          
          # Create error comment
          ERROR_CONTENT="## ‚ö†Ô∏è Cleanup Error\n\nFailed to clean comments: $1\n\n*Please check the workflow logs for more details.*"
          curl -s -X POST -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            -d "{\"body\":\"$ERROR_CONTENT\"}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments"
        }
        
        trap 'catch "$?"' ERR
