name: GitHub App Authentication Tester

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'github-script'
        type: choice
        options:
        - github-script
        - rest-api
        - github-cli
        - all
      test_action:
        description: 'Action to test (comment, label, etc.)'
        required: true
        default: 'comment'
        type: choice
        options:
        - comment
        - label
        - issue

jobs:
  test-github-app-auth:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    
    steps:
    - name: Generate GitHub App Token
      id: generate_token
      if: vars.APP_ID
      uses: actions/create-github-app-token@v2
      with:
        app-id: ${{ vars.APP_ID }}
        private-key: ${{ secrets.LB_PRIVATE_KEY }}
    
    - name: Validate GitHub App Token
      if: always()
      run: |
        if [ "${{ steps.generate_token.outputs.token }}" != "" ]; then
          echo "✅ GitHub App token generated successfully"
          echo "Token length: $(echo -n "${{ steps.generate_token.outputs.token }}" | wc -c)"
        else
          echo "❌ ERROR: GitHub App token generation failed"
          echo "Please check APP_ID and LB_PRIVATE_KEY configuration"
          exit 1
        fi

    - name: Test GitHub Script Authentication
      if: ${{ github.event.inputs.test_type == 'github-script' || github.event.inputs.test_type == 'all' }}
      env:
        GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
      uses: actions/github-script@v7
      with:
        script: |
          try {
            console.log('🧪 Testing GitHub Script with GitHub App Token...');
            
            // Test 1: Get repository info (should work with repo permissions)
            const repo = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            console.log('📁 Repository:', repo.data.full_name);
            console.log('🔗 Default branch:', repo.data.default_branch);
            console.log('👤 Owner:', repo.data.owner.login);
            
            // Test 2: List issues in the repository (should work with issues permissions)
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 1
            });
            console.log('🎯 Found', issues.data.length, 'open issue(s)');
            
            // Test 3: Create a test comment
            const issueNumber = ${{ github.event.inputs.test_action == 'issue' && '1' || github.event.issue.number || 1 }};
            const testComment = '🧪 **GitHub Script Test** - This comment was created using GitHub Script with GitHub App Token on ' + new Date().toISOString();
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: testComment
            });
            
            console.log('✅ Comment created successfully by GitHub Script on issue #' + issueNumber);
            
            // Test 4: List labels (should work with issues permissions)
            const labels = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 5
            });
            console.log('🏷️ Found', labels.data.length, 'label(s) in repository');
            
          } catch (error) {
            console.error('❌ GitHub Script test failed:', error.message);
            throw error;
          }

    - name: Test REST API Authentication
      if: ${{ github.event.inputs.test_type == 'rest-api' || github.event.inputs.test_type == 'all' }}
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |
        echo "🧪 Testing REST API with GitHub App Token..."
        
        # Test 1: Get repository info
        echo "📁 Getting repository info..."
        repo_response=$(curl -s \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }})
        
        echo "Repository response: $repo_response"
        
        repo_name=$(echo "$repo_response" | jq -r '.full_name')
        repo_owner=$(echo "$repo_response" | jq -r '.owner.login')
        default_branch=$(echo "$repo_response" | jq -r '.default_branch')
        
        echo "📁 Repository: $repo_name"
        echo "👤 Owner: $repo_owner"
        echo "🔗 Default branch: $default_branch"
        
        # Test 2: Create a test comment using REST API
        echo "💬 Creating test comment..."
        
        if [ "${{ github.event.inputs.test_action }}" == "issue" ]; then
          issue_number=1
        else
          issue_number="1"
        fi
        
        comment_data='{
          "body": "🧪 **REST API Test** - This comment was created using REST API with GitHub App Token on '$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
        }'
        
        comment_response=$(curl -s \
          -X POST \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Content-Type: application/json" \
          -d "$comment_data" \
          https://api.github.com/repos/${{ github.repository }}/issues/$issue_number/comments)
        
        echo "Comment response: $comment_response"
        
        if echo "$comment_response" | jq -e '.id' > /dev/null 2>&1; then
          comment_id=$(echo "$comment_response" | jq -r '.id')
          echo "✅ Comment created successfully with ID: $comment_id"
        else
          echo "❌ Failed to create comment"
          echo "Response: $comment_response"
        fi
        
        # Test 3: List repository labels
        echo "🏷️ Listing repository labels..."
        labels_response=$(curl -s \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/labels?per_page=5)
        
        label_count=$(echo "$labels_response" | jq '. | length')
        echo "🏷️ Found $label_count label(s) in repository"

    - name: Test GitHub CLI Authentication
      if: ${{ github.event.inputs.test_type == 'github-cli' || github.event.inputs.test_type == 'all' }}
      env:
        GH_TOKEN: ${{ steps.generate_token.outputs.token }}
      run: |
        echo "🧪 Testing GitHub CLI with GitHub App Token..."
        
        # Configure git
        git config --global user.name "GitHub App Tester"
        git config --global user.email "action@github.com"
        
        # Initialize git repository
        git init
        git remote add origin https://github.com/${{ github.repository }}.git
        git fetch origin
        
        # Test 1: Check authentication status
        echo "🔐 Checking authentication status..."
        gh auth status
        
        # Test 2: Get repository info
        echo "📁 Getting repository info..."
        gh repo view --json nameWithOwner,defaultBranchRef --jq '{name: .nameWithOwner, branch: .defaultBranchRef.name}'
        
        # Test 3: Create a test comment using GitHub CLI
        echo "💬 Creating test comment..."
        
        if [ "${{ github.event.inputs.test_action }}" == "issue" ]; then
          issue_number=1
        else
          issue_number="1"
        fi
        
        test_comment="🧪 **GitHub CLI Test** - This comment was created using GitHub CLI with GitHub App Token on $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
        if gh issue comment $issue_number --body "$test_comment"; then
          echo "✅ Comment created successfully by GitHub CLI on issue #$issue_number"
        else
          echo "❌ Failed to create comment with GitHub CLI"
        fi
        
        # Test 4: List repository labels
        echo "🏷️ Listing repository labels..."
        gh label list --limit 5 --json name,color

    - name: Summary
      if: always()
      run: |
        echo "🎯 GitHub App Authentication Test Summary"
        echo "=========================================="
        echo "Test Type: ${{ github.event.inputs.test_type }}"
        echo "Test Action: ${{ github.event.inputs.test_action }}"
        echo "Repository: ${{ github.repository }}"
        echo "GitHub App ID: ${{ vars.APP_ID }}"
        echo "Token Generated: ${{ steps.generate_token.outputs.token != '' && '✅' || '❌' }}"
        echo ""
        echo "📋 Check the individual test steps above for detailed results"
        echo "🔍 The comments created by each method will show which authentication method was used"