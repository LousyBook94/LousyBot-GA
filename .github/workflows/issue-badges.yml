name: Issue Badges

on:
  issues:
    types: [opened, edited, labeled, unlabeled]

jobs:
  assign-badges:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Generate Issue Badges
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Get configuration from secrets
          const model = process.env.LB_MODEL || 'claude';
          const baseUrl = process.env.LB_BASE_URL || 'https://text.pollinations.ai/openai/chat/completions';
          const apiKey = process.env.LB_API_KEY;
          
          if (!apiKey) {
            core.setFailed('LB_API_KEY secret is required');
            return;
          }
          
          // Get the issue data
          const issue = context.payload.issue;
          const issueNumber = issue.number;
          const issueTitle = issue.title;
          const issueBody = issue.body || '';
          const labels = issue.labels.map(label => label.name);
          
          // Create API payload
          const payload = {
            model: model,
            messages: [
              {
                role: "system",
                content: "You are a helpful assistant that analyzes GitHub issues and generates appropriate badges. Respond with only the badge text in format: [badge-name]: badge-description"
              },
              {
                role: "user", 
                content: `Issue Title: ${issueTitle}\nIssue Body: ${issueBody}\nLabels: ${labels.join(', ')}\n\nGenerate appropriate badges for this issue based on its content and labels.`
              }
            ],
            max_tokens: 150
          };
          
          // Make API request
          const response = await fetch(baseUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${apiKey}`
            },
            body: JSON.stringify(payload)
          });
          
          if (!response.ok) {
            throw new Error(`API request failed: ${response.status} ${response.statusText}`);
          }
          
          const data = await response.json();
          const badgeText = data.choices[0].message.content.trim();
          
          // Create or update issue comment with badges
          const commentContent = `## üè∑Ô∏è Issue Badges\n\n${badgeText}\n\n---\n*Generated by LousyBot-GA*`;
          
          // Check if comment already exists
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber
          });
          
          const existingComment = comments.data.find(comment => 
            comment.body.includes('üè∑Ô∏è Issue Badges') && comment.body.includes('Generated by LousyBot-GA')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentContent
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: commentContent
            });
          }
          
          console.log('Badges generated and posted successfully!');