name: Issue Badge Assignment

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

jobs:
  assign-badge:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Analyze issue content
      id: analyze
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          const comment = context.payload.comment;
          let content = "";
          if (comment) {
            content = issue.title + " " + issue.body + " " + comment.body;
          } else {
            content = issue.title + " " + issue.body;
          }
          const response = await fetch("${{ secrets.LB_BASE_URL }}", {
            method: "POST",
            headers: {
              "Authorization": "Bearer ${{ secrets.LB_API_KEY }}",
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              model: "${{ secrets.LB_MODEL }}",
              messages: [
                {
                  role: "system",
                  content: "You are a GitHub issue management expert. Analyze the issue content and suggest a badge. Respond with a JSON object containing: {badge: string, color: string, description: string}. Badge should be short and descriptive (e.g., 'Priority: High', 'Status: In Progress', 'Type: Bug'). Color should be a valid hex color code. Description should explain the badge meaning."
                },
                {
                  role: "user",
                  content: `Analyze this GitHub issue to suggest a badge. Issue: ${content}`
                }
              ]
            })
          });
          const data = await response.json();
          const badgeData = JSON.parse(data.choices[0].message.content);
          core.setOutput("badge_name", badgeData.badge);
          core.setOutput("badge_color", badgeData.color);
          core.setOutput("badge_description", badgeData.description);

    - name: Create or update issue comment with badge
      uses: actions/github-script@v7
      with:
        script: |
          const issueNumber = context.issue.number;
          const badgeName = "${{ steps.analyze.outputs.badge_name }}";
          const badgeColor = "${{ steps.analyze.outputs.badge_color }}";
          const badgeDescription = "${{ steps.analyze.outputs.badge_description }}";
          const badgeUrl = `https://img.shields.io/badge/${encodeURIComponent(badgeName)}-${badgeColor.replace("#", "")}.svg`;
          const badgeMarkdown = `![${badgeName}](${badgeUrl})`;
          
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issueNumber
          });

          const botComment = comments.data.find(comment => comment.user.login === 'github-actions[bot]' && comment.body.includes('img.shields.io/badge'));

          const newBody = `${badgeMarkdown}\n\n**${badgeName}**\n\n${badgeDescription}`;

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: newBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: newBody
            });
          }

    - name: Add label based on badge
      uses: actions/github-script@v7
      with:
        script: |
          const issueNumber = context.issue.number;
          const badgeName = "${{ steps.analyze.outputs.badge_name }}";
          const label = badgeName.toLowerCase().replace(/[^a-z0-9\\s-]/g, '').replace(/\\s+/g, '-');
          
          try {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              labels: [label]
            });
          } catch (error) {
            // Label already exists, probably
            console.log(error);
          }
