name: Issue Cleaner

on:
  issue_comment:
    types: [created]

jobs:
  clean-comments:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Clean Comments
      uses: actions/github-script@v7
      with:
        script: |
          // Get the comment data
          const comment = context.payload.comment;
          const commentBody = comment.body;
          const commentId = comment.id;
          const issueNumber = context.payload.issue?.number || context.payload.comment?.issue_number;
          if (!issueNumber) {
            console.error('Error: Could not determine issue number');
            return;
          }
          
          // Get configuration from secrets
          const botName = context.actor || 'lousybot';
          const targetCommand = '@lousybot /clear';
          
          // Check if GitHub App credentials are available
          const hasGitHubApp = secrets.LB_APP_ID && secrets.LB_PRIVATE_KEY;
          console.log(`GitHub App credentials available: ${hasGitHubApp}`);
          
          // Check if comment contains the cleanup command
          if (commentBody.includes(targetCommand)) {
            console.log('Cleanup command detected, processing...');
            
            // Get all comments on the issue
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            
            let deletedCount = 0;
            
            // Filter and delete comments made by the bot or containing @lousybot
            const commentsToDelete = comments.data.filter(c => {
              const isBotComment = c.user.login === botName;
              const hasBotMention = c.body.includes('@lousybot');
              const isGitHubActionsBot = c.user.login === 'github-actions[bot]';
              return isBotComment || hasBotMention || (!hasGitHubApp && isGitHubActionsBot);
            });
            
            // Delete the comments
            for (const commentToDelete of commentsToDelete) {
              try {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: commentToDelete.id
                });
                deletedCount++;
                console.log(`Deleted comment ${commentToDelete.id}`);
              } catch (error) {
                console.error(`Failed to delete comment ${commentToDelete.id}:`, error.message);
              }
            }
            
            // Note: Skipping confirmation comment to avoid "This comment was removed by..." indicators
            // The cleanup is silent to minimize GitHub's deletion notifications
            console.log(`Cleanup completed. Deleted ${deletedCount} comments silently.`);
          } else {
            console.log('No cleanup command found in comment.');
          }